EBNF:

<stmt> -> <varDecl> | <assignment> | <break> | <return> | <continue> | <ifStmt> | <whileStmt> | <forStmt> | <printStmt> | <functionDeclaration> | <functionCall>;

<functionDeclaration> -> func identifier openParanthesis <arguments/parameters> closeParanthesis blockStart
                            {<stmt>}
                        blockEnd

<break> -> break;

<continue> -> continue;

<return> -> return <boolean1>;

<functionCall> -> indentifier openParanthesis <arguments/parameters> closeParanthesis

<arguments/parameters> -> epsilon | [identifier {,identifier}]

<printStmt> -> print openParanthesis (<boolean1>) closeParanthesis

<varDecl> -> var idetifier = <boolean1>;

<assignment> -> idetifier = <boolean1>;

<ifStmt> -> if openParanthesis <boolean1> closeParanthesis
            <block>
        | 
        if openParanthesis <boolean1> closeParanthesis
            <block>
        {
        elseif openParanthesis <boolean1> closeParanthesis
            <block>
        }
        else 
            <block>

<whileStmt> -> while openParanthesis <boolean1> closeParanthesis
            <block>

<forStmt> -> for openParanthesis (<varDecl> | <assignment> | identifier); <boolean1>; <assignment> closeParanthesis
            <block>

<block> -> <blockStart>
            {<stmt>}
           <blockEnd>

<boolean1> -> <boolean2> {or <boolean2>};

<boolean2> -> <relational1> {and <relational1>};

<relational1> -> <relational2> {(== | !=) <relational2>};

<relational2> -> <arithmetic1> {(> | >= | < | <=) <arithmetic1>};

<arithmetic1> → <arithmetic2> {(+ | -) <arithmetic2>};

<arithmetic2> → <factor> {(* | / | %) <factor>};

<factor> -> openParanthesis <boolean1> closeParanthesis | {+|-|!}idetifier | {+|-|!}number | string | True | False | null | <functionCall>

<blockStart> -> {

<blockEnd> -> }

<openParanthesis> -> (

<closeParanthesis> -> )
